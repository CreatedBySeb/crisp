use crate::MEMORY_SIZE;

pub const FONT_OFFSET: usize = 0x50;
const FONT_HEIGHT: u8 = 5;
type FontSprite = [u8; FONT_HEIGHT as usize];

const FONT: [FontSprite; 16] = [
    [0xf0, 0x90, 0x90, 0x90, 0xf0],
    [0x20, 0x60, 0x20, 0x20, 0x70],
    [0xf0, 0x10, 0xf0, 0x80, 0xf0],
    [0xf0, 0x10, 0xf0, 0x10, 0xf0],
    [0x90, 0x90, 0xf0, 0x10, 0x10],
    [0xf0, 0x80, 0xf0, 0x10, 0xf0],
    [0xf0, 0x80, 0xf0, 0x90, 0xf0],
    [0xf0, 0x10, 0x20, 0x40, 0x40],
    [0xf0, 0x90, 0xf0, 0x90, 0xf0],
    [0xf0, 0x90, 0xf0, 0x10, 0xf0],
    [0xf0, 0x90, 0xf0, 0x90, 0x90],
    [0xe0, 0x90, 0xe0, 0x90, 0xe0],
    [0xf0, 0x80, 0x80, 0x80, 0xf0],
    [0xe0, 0x90, 0x90, 0x90, 0xe0],
    [0xf0, 0x80, 0xf0, 0x80, 0xf0],
    [0xf0, 0x80, 0xf0, 0x80, 0x80],
];

pub fn get_char_address(char: u8) -> usize {
    assert!(char < 16, "Requested char is out of bounds");

    return FONT_OFFSET + (usize::from(char) * FONT_HEIGHT as usize);
}

pub fn load_font(memory: &mut [u8; MEMORY_SIZE]) {
    for i in 0..16 {
        let offset = FONT_OFFSET + (i * FONT_HEIGHT) as usize;
        memory[offset..offset + FONT_HEIGHT as usize].copy_from_slice(&FONT[i as usize]);
    }
}
